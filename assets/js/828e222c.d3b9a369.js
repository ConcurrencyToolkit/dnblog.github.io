"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[207],{3905:(t,a,e)=>{e.d(a,{Zo:()=>o,kt:()=>k});var n=e(7294);function r(t,a,e){return a in t?Object.defineProperty(t,a,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[a]=e,t}function l(t,a){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(t,a).enumerable}))),e.push.apply(e,n)}return e}function s(t){for(var a=1;a<arguments.length;a++){var e=null!=arguments[a]?arguments[a]:{};a%2?l(Object(e),!0).forEach((function(a){r(t,a,e[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):l(Object(e)).forEach((function(a){Object.defineProperty(t,a,Object.getOwnPropertyDescriptor(e,a))}))}return t}function m(t,a){if(null==t)return{};var e,n,r=function(t,a){if(null==t)return{};var e,n,r={},l=Object.keys(t);for(n=0;n<l.length;n++)e=l[n],a.indexOf(e)>=0||(r[e]=t[e]);return r}(t,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(n=0;n<l.length;n++)e=l[n],a.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(t,e)&&(r[e]=t[e])}return r}var i=n.createContext({}),p=function(t){var a=n.useContext(i),e=a;return t&&(e="function"==typeof t?t(a):s(s({},a),t)),e},o=function(t){var a=p(t.components);return n.createElement(i.Provider,{value:a},t.children)},d="mdxType",u={inlineCode:"code",wrapper:function(t){var a=t.children;return n.createElement(n.Fragment,{},a)}},c=n.forwardRef((function(t,a){var e=t.components,r=t.mdxType,l=t.originalType,i=t.parentName,o=m(t,["components","mdxType","originalType","parentName"]),d=p(e),c=r,k=d["".concat(i,".").concat(c)]||d[c]||u[c]||l;return e?n.createElement(k,s(s({ref:a},o),{},{components:e})):n.createElement(k,s({ref:a},o))}));function k(t,a){var e=arguments,r=a&&a.mdxType;if("string"==typeof t||r){var l=e.length,s=new Array(l);s[0]=c;var m={};for(var i in a)hasOwnProperty.call(a,i)&&(m[i]=a[i]);m.originalType=t,m[d]="string"==typeof t?t:r,s[1]=m;for(var p=2;p<l;p++)s[p]=e[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,e)}c.displayName="MDXCreateElement"},5162:(t,a,e)=>{e.d(a,{Z:()=>s});var n=e(7294),r=e(6010);const l="tabItem_Ymn6";function s(t){let{children:a,hidden:e,className:s}=t;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(l,s),hidden:e},a)}},5488:(t,a,e)=>{e.d(a,{Z:()=>c});var n=e(7462),r=e(7294),l=e(6010),s=e(2389),m=e(7392),i=e(7094),p=e(2466);const o="tabList__CuJ",d="tabItem_LNqP";function u(t){const{lazy:a,block:e,defaultValue:s,values:u,groupId:c,className:k}=t,N=r.Children.map(t.children,(t=>{if((0,r.isValidElement)(t)&&"value"in t.props)return t;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof t.type?t.type:t.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),g=u??N.map((t=>{let{props:{value:a,label:e,attributes:n}}=t;return{value:a,label:e,attributes:n}})),h=(0,m.l)(g,((t,a)=>t.value===a.value));if(h.length>0)throw new Error(`Docusaurus error: Duplicate values "${h.map((t=>t.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const b=null===s?s:s??N.find((t=>t.props.default))?.props.value??N[0].props.value;if(null!==b&&!g.some((t=>t.value===b)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${b}" but none of its children has the corresponding value. Available values are: ${g.map((t=>t.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:f,setTabGroupChoices:y}=(0,i.U)(),[v,x]=(0,r.useState)(b),_=[],{blockElementScrollPositionUntilNextRender:w}=(0,p.o5)();if(null!=c){const t=f[c];null!=t&&t!==v&&g.some((a=>a.value===t))&&x(t)}const C=t=>{const a=t.currentTarget,e=_.indexOf(a),n=g[e].value;n!==v&&(w(a),x(n),null!=c&&y(c,String(n)))},T=t=>{let a=null;switch(t.key){case"Enter":C(t);break;case"ArrowRight":{const e=_.indexOf(t.currentTarget)+1;a=_[e]??_[0];break}case"ArrowLeft":{const e=_.indexOf(t.currentTarget)-1;a=_[e]??_[_.length-1];break}}a?.focus()};return r.createElement("div",{className:(0,l.Z)("tabs-container",o)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":e},k)},g.map((t=>{let{value:a,label:e,attributes:s}=t;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:v===a?0:-1,"aria-selected":v===a,key:a,ref:t=>_.push(t),onKeyDown:T,onClick:C},s,{className:(0,l.Z)("tabs__item",d,s?.className,{"tabs__item--active":v===a})}),e??a)}))),a?(0,r.cloneElement)(N.filter((t=>t.props.value===v))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},N.map(((t,a)=>(0,r.cloneElement)(t,{key:a,hidden:t.props.value!==v})))))}function c(t){const a=(0,s.Z)();return r.createElement(u,(0,n.Z)({key:String(a)},t))}},196:(t,a,e)=>{e.r(a),e.d(a,{assets:()=>o,contentTitle:()=>i,default:()=>c,frontMatter:()=>m,metadata:()=>p,toc:()=>d});var n=e(7462),r=(e(7294),e(3905)),l=e(5488),s=e(5162);const m={slug:"text-io-benchmarks",title:"Text IO Benchmarks",tags:["text_io"]},i="Text IO performance: benchmarks",p={permalink:"/text-io-benchmarks",source:"@site/blog/2022-12-02-plain-text-io-benchmarks.mdx",title:"Text IO Benchmarks",description:"In the previous post, I discussed what affects plain-text IO performance. Now I benchmark different approaches for stdin/stdout IO in native and managed code.",date:"2022-12-02T00:00:00.000Z",formattedDate:"December 2, 2022",tags:[{label:"text_io",permalink:"/tags/text-io"}],readingTime:14.995,hasTruncateMarker:!0,authors:[],frontMatter:{slug:"text-io-benchmarks",title:"Text IO Benchmarks",tags:["text_io"]},prevItem:{title:"Text IO Library",permalink:"/plain-text-io-lib"},nextItem:{title:"Text IO Performance",permalink:"/plain-text-io-perf"}},o={authorsImageUrls:[]},d=[{value:"Benchmark running",id:"benchmark-running",level:3},{value:"Environment",id:"environment",level:3},{value:"Input data",id:"input-data",level:3},{value:"Scenario 0: Overhead",id:"scenario-0-overhead",level:3},{value:"Scenario 1: Input",id:"scenario-1-input",level:3},{value:"Programs",id:"programs",level:4},{value:"Scenario 2: Echo",id:"scenario-2-echo",level:3},{value:"Conclusion",id:"conclusion",level:2},{value:"Announce",id:"announce",level:2},{value:"Links",id:"links",level:2},{value:"Homework",id:"homework",level:2}],u={toc:d};function c(t){let{components:a,...e}=t;return(0,r.kt)("wrapper",(0,n.Z)({},u,e,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"In the ",(0,r.kt)("a",{parentName:"p",href:"/plain-text-io-perf"},"previous")," post, I discussed what affects plain-text IO performance. Now I benchmark different approaches for stdin/stdout IO in native and managed code."),(0,r.kt)("p",null,"A typical choice for competitive programming is C++ language. Because it is native, it is considered fast, with no overhead, and with zero-cost abstractions. But is it true, especially for IO performance?"),(0,r.kt)("p",null,"There are some popular tips for getting the best IO performance with C++:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Prefer C-style ",(0,r.kt)("inlineCode",{parentName:"li"},"scanf/printf")," over C++ ",(0,r.kt)("inlineCode",{parentName:"li"},"cin/cout")," because they are much faster"),(0,r.kt)("li",{parentName:"ul"},"If you like ",(0,r.kt)("inlineCode",{parentName:"li"},"cin/cout"),' as easy-to-use constructs, reduce their cost by adding "magic spells" to your code. For the explanation of this "spells", please look into ',(0,r.kt)("a",{parentName:"li",href:"https://www.stroustrup.com/Performance-TR.pdf#page=63"},"Technical Report on C++ Performance, 5.6.7, page 63"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"ios_base::sync_with_stdio(false);\ncin.tie(NULL);\n"))),(0,r.kt)("li",{parentName:"ul"},"Use ",(0,r.kt)("inlineCode",{parentName:"li"},"'\\n'")," instead of ",(0,r.kt)("inlineCode",{parentName:"li"},"std::endl")," for line breaks")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"For best .NET IO performance, you should not use ",(0,r.kt)("inlineCode",{parentName:"p"},"Console")," static methods directly, especially for the output."),(0,r.kt)("p",{parentName:"admonition"},"Use STDIN/STDOUT via StreamReader and StreamWriter instead:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"using var input = new StreamReader(Console.OpenStandardInput());\nusing var output = new StreamWriter(Console.OpenStandardOutput());\n\nstring line = input.ReadLine();\noutput.WriteLine(Process(line));\n"))),(0,r.kt)("p",null,"I will test C++ and .NET IO and these tips against various compilers and scenarios."),(0,r.kt)("p",null,"It is not fully correct benchmark for plain-text IO. E.g. there is different hardware for Windows and Linux. It is only estimation based on a small number of cases. If you want to reproduce measurements in your environment or other test cases, you could start from the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/epeshk/TextIOBenchmarks"},"benchmark sources"),"."),(0,r.kt)("p",null,"All tested programs don't have any extraordinary gimmicks for performance, so it is indeed possible to write much performant code."),(0,r.kt)("h3",{id:"benchmark-running"},"Benchmark running"),(0,r.kt)("p",null,"I will use the ",(0,r.kt)("a",{parentName:"p",href:"https://benchmarkdotnet.org/index.html"},"Benchmark.NET")," for my measurements. Although this library was designed for benchmarking of the .NET code, it contains a lot of useful benchmarking stuff like test case combination, time measurement, statistics, aggregation, and result presentation. It is also a commonly known tool that makes benchmarks easy to modify and reproduce."),(0,r.kt)("p",null,"The benchmarked method will invoke another executable. Overhead was measured by an empty program run."),(0,r.kt)("p",null,"Mention that the input data are stored in memory. The output could be drained to ",(0,r.kt)("inlineCode",{parentName:"p"},"Stream.Null")," or also stored in memory, e.g. for validation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"[Benchmark]\npublic void Run() => Run(ProgramExecutable, PreloadedInput)\n\npublic static void Run(string program, byte[] input)\n{\n  var psi = new ProcessStartInfo(program)\n  {\n    RedirectStandardInput = true,\n    RedirectStandardOutput = true,\n    CreateNoWindow = true\n  };\n\n  var process = Process.Start(psi);\n  var reader = Task.Run(() =>\n    process.StandardOutput.BaseStream.CopyToAsync(Stream.Null));\n\n  var stdin = process.StandardInput.BaseStream;\n  stdin.Write(input);\n  stdin.Flush();\n\n  reader.Wait();\n  process.WaitForExit();\n}\n")),(0,r.kt)("h3",{id:"environment"},"Environment"),(0,r.kt)("p",null,"OS: Windows 10, Ubuntu 22.04"),(0,r.kt)("p",null,"Compilers:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Windows: MSVC 19.31.31107 from VS Community 2022, MinGW g++ 12.2.0")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Linux: g++")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"both: .NET 7.0.0 JIT and NativeAOT")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"MSVC parameters: ",(0,r.kt)("inlineCode",{parentName:"p"},"/TP /MT /EHsc /GL /O2 /W3 /Za /std:c++latest /D _CRT_SECURE_NO_WARNINGS"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"g++ parameters: ",(0,r.kt)("inlineCode",{parentName:"p"},"-static -O2")))),(0,r.kt)("p",null,"I will only post a 64-bit case for readability, but you could test for 32-bit on your own"),(0,r.kt)("h3",{id:"input-data"},"Input data"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"pregenerated 6 digit random integers: ",(0,r.kt)("span",{parentName:"li",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mn",{parentName:"mrow"},"1"),(0,r.kt)("msup",{parentName:"mrow"},(0,r.kt)("mn",{parentName:"msup"},"0"),(0,r.kt)("mn",{parentName:"msup"},"5")),(0,r.kt)("mo",{parentName:"mrow"},"<"),(0,r.kt)("mo",{parentName:"mrow"},"="),(0,r.kt)("msub",{parentName:"mrow"},(0,r.kt)("mi",{parentName:"msub"},"a"),(0,r.kt)("mi",{parentName:"msub"},"i")),(0,r.kt)("mo",{parentName:"mrow"},"<"),(0,r.kt)("mn",{parentName:"mrow"},"1"),(0,r.kt)("msup",{parentName:"mrow"},(0,r.kt)("mn",{parentName:"msup"},"0"),(0,r.kt)("mn",{parentName:"msup"},"6"))),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"10^5 <= a_i < 10^6")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.8532em",verticalAlign:"-0.0391em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},"1"),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord"},"0"),(0,r.kt)("span",{parentName:"span",className:"msupsub"},(0,r.kt)("span",{parentName:"span",className:"vlist-t"},(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.8141em"}},(0,r.kt)("span",{parentName:"span",style:{top:"-3.063em",marginRight:"0.05em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,r.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},"5")))))))),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},"<="),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6891em",verticalAlign:"-0.15em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"a"),(0,r.kt)("span",{parentName:"span",className:"msupsub"},(0,r.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3117em"}},(0,r.kt)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"0em",marginRight:"0.05em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,r.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"i")))),(0,r.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,r.kt)("span",{parentName:"span"})))))),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},"<"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.8141em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},"1"),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord"},"0"),(0,r.kt)("span",{parentName:"span",className:"msupsub"},(0,r.kt)("span",{parentName:"span",className:"vlist-t"},(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.8141em"}},(0,r.kt)("span",{parentName:"span",style:{top:"-3.063em",marginRight:"0.05em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,r.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},"6")))))))))))),", ",(0,r.kt)("span",{parentName:"li",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"N"),(0,r.kt)("mo",{parentName:"mrow"},"="),(0,r.kt)("mn",{parentName:"mrow"},"200000")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"N = 200000")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6833em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10903em"}},"N"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},"="),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6444em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},"200000")))))),(0,r.kt)("li",{parentName:"ul"},"5800000 bytes (5.5 MB)")),(0,r.kt)("h3",{id:"scenario-0-overhead"},"Scenario 0: Overhead"),(0,r.kt)("p",null,"In this scenario, I measured an empty program run time, including process creation and startup overhead. Other results are NOT adjusted for it. For workload time only, you should subtract this overhead manually."),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Windows"),(0,r.kt)("p",null,(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Program"),(0,r.kt)("th",{parentName:"tr",align:null},"Compiler"),(0,r.kt)("th",{parentName:"tr",align:"right"},"Median"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"empty_cpp"),(0,r.kt)("td",{parentName:"tr",align:null},"g++64"),(0,r.kt)("td",{parentName:"tr",align:"right"},"14 ms")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"empty_cpp"),(0,r.kt)("td",{parentName:"tr",align:null},"msvc64"),(0,r.kt)("td",{parentName:"tr",align:"right"},"14 ms")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"empty_cs"),(0,r.kt)("td",{parentName:"tr",align:null},"NativeAOT"),(0,r.kt)("td",{parentName:"tr",align:"right"},"19 ms")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"empty_cs"),(0,r.kt)("td",{parentName:"tr",align:null},"JIT"),(0,r.kt)("td",{parentName:"tr",align:"right"},"36 ms")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"empty_kt"),(0,r.kt)("td",{parentName:"tr",align:null},"JIT"),(0,r.kt)("td",{parentName:"tr",align:"right"},"75 ms")))))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Linux"),(0,r.kt)("p",null,(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Program"),(0,r.kt)("th",{parentName:"tr",align:null},"Compiler"),(0,r.kt)("th",{parentName:"tr",align:"right"},"Median"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"empty_cpp"),(0,r.kt)("td",{parentName:"tr",align:null},"g++64"),(0,r.kt)("td",{parentName:"tr",align:"right"},"0.3 ms")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"empty_cs"),(0,r.kt)("td",{parentName:"tr",align:null},"NativeAOT"),(0,r.kt)("td",{parentName:"tr",align:"right"},"1.5 ms")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"empty_kt"),(0,r.kt)("td",{parentName:"tr",align:null},"JVM"),(0,r.kt)("td",{parentName:"tr",align:"right"},"16 ms")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"empty_cs"),(0,r.kt)("td",{parentName:"tr",align:null},"JIT"),(0,r.kt)("td",{parentName:"tr",align:"right"},"70 ms")))))),(0,r.kt)("p",null,"The overhead for a native binary on Linux is significantly lower than on Windows, likely because creating the new process with the ",(0,r.kt)("inlineCode",{parentName:"p"},"fork")," call is much faster."),(0,r.kt)("p",null,"For managed applications, startup time on Linux is significantly worse, so I have decided to open ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/dotnet/runtime/issues/79206"},"the issue")," regarding this."),(0,r.kt)("h3",{id:"scenario-1-input"},"Scenario 1: Input"),(0,r.kt)("p",null,"In this scenario program should read a 5 MB input and then output a short answer (XOR of the numbers), only for correctness check."),(0,r.kt)("h4",{id:"programs"},"Programs"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"cin \u2014 ",(0,r.kt)("inlineCode",{parentName:"li"},"std::cin")," used for reading"),(0,r.kt)("li",{parentName:"ul"},"cin_fast/cin_cout_fast \u2014 ",(0,r.kt)("inlineCode",{parentName:"li"},"std::cin")," used for reading, configured with ",(0,r.kt)("inlineCode",{parentName:"li"},"sync_with_stdio")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"tie")),(0,r.kt)("li",{parentName:"ul"},"scanf \u2014 ",(0,r.kt)("inlineCode",{parentName:"li"},"scanf")," used for reading"),(0,r.kt)("li",{parentName:"ul"},"fastscan \u2014 custom parsing, based on ",(0,r.kt)("inlineCode",{parentName:"li"},"_getchar_nolock")," on Windows and ",(0,r.kt)("inlineCode",{parentName:"li"},"getchar_unlocked")," on Linux"),(0,r.kt)("li",{parentName:"ul"},"slowscan (C#) \u2014 custom parsing, based on ",(0,r.kt)("inlineCode",{parentName:"li"},"Console.Read")),(0,r.kt)("li",{parentName:"ul"},"fastscan (C#) \u2014 custom parsing, based on ",(0,r.kt)("inlineCode",{parentName:"li"},"StreamReader.Read"))),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"cs_console",label:"console",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'int N = int.Parse(Console.ReadLine());\n\nint a_xor = 0, b_xor = 0, c_xor = 0, d_xor = 0;\n\nfor (var i = 0; i < N; ++i)\n{\n  var numbers = Console.ReadLine().Split();\n  a_xor ^= int.Parse(numbers[0]); // (int)double.Parse(numbers[0], CultureInfo.InvariantCulture);\n  b_xor ^= int.Parse(numbers[1]);\n  c_xor ^= int.Parse(numbers[2]);\n  d_xor ^= int.Parse(numbers[3]);\n}\n\nConsole.WriteLine($"{a_xor} {b_xor} {c_xor} {d_xor}");\n'))),(0,r.kt)(s.Z,{value:"cs_slowscan",label:"slowscan",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"int N = slowscan();\n\nint a_xor = 0, b_xor = 0, c_xor = 0, d_xor = 0;\n\nfor (var i = 0; i < N; ++i)\n{\n  a_xor ^= slowscan();\n  b_xor ^= slowscan();\n  c_xor ^= slowscan();\n  d_xor ^= slowscan();\n}\n\nConsole.WriteLine($\"{a_xor} {b_xor} {c_xor} {d_xor}\");\n\nstatic int slowscan()\n{\n  bool negative = false;\n  bool read_start = false;\n\n  int number = 0;\n\n  while (true)\n  {\n    int c = Console.Read();\n    if (c=='-')\n    {\n      negative = true;\n      read_start = true;\n      continue;\n    }\n\n    if (c is >= '0' and <= '9')\n    {\n      number = number * 10 + (c - '0');\n      read_start = true;\n      continue;\n    }\n\n    if (read_start)\n      break;\n  }\n\n  return negative ? -number : number;\n}\n"))),(0,r.kt)(s.Z,{value:"cs_fastscan",label:"fastscan#",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"using var input = new StreamReader(Console.OpenStandardInput());\n\nint N = fastscan();\n\nint a_xor = 0, b_xor = 0, c_xor = 0, d_xor = 0;\n\nfor (var i = 0; i < N; ++i)\n{\n  a_xor ^= fastscan();\n  b_xor ^= fastscan();\n  c_xor ^= fastscan();\n  d_xor ^= fastscan();\n}\n\nConsole.WriteLine($\"{a_xor} {b_xor} {c_xor} {d_xor}\");\n\nint fastscan()\n{\n  bool negative = false;\n  bool read_start = false;\n\n  int number = 0;\n\n  while (true)\n  {\n    int c = input.Read();\n    if (c=='-')\n    {\n      negative = true;\n      read_start = true;\n      continue;\n    }\n\n    if (c is >= '0' and <= '9')\n    {\n      number = number * 10 + (c - '0');\n      read_start = true;\n      continue;\n    }\n\n    if (read_start)\n      break;\n  }\n\n  return negative ? -number : number;\n}\n"))),(0,r.kt)(s.Z,{value:"fastscan",label:"fastscan",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <iostream>\n#include <ios>\nusing namespace std;\n\nint fastscan()\n{\n  bool negative = false;\n  bool read_start = false;\n\n  int number = 0;\n\n  while (true)\n  {\n\n#ifdef _WIN32\n    int c = _getchar_nolock();\n#else\n    int c = getchar_unlocked();\n#endif\n    if (c=='-')\n    {\n      negative = true;\n      read_start = true;\n      continue;\n    }\n\n    if ('0' <= c && c <= '9')\n    {\n      number = number * 10 + (c - '0');\n      read_start = true;\n      continue;\n    }\n\n    if (read_start)\n      break;\n  }\n\n  return negative ? -number : number;\n}\n\nint main()\n{\n  int t = fastscan();\n  int a_xor = 0, b_xor = 0, c_xor = 0, d_xor = 0;\n\n  for (int i = 0; i < t; ++i) {\n    a_xor ^= fastscan();\n    b_xor ^= fastscan();\n    c_xor ^= fastscan();\n    d_xor ^= fastscan();\n  }\n\n  printf(\"%d %d %d %d\\n\", a_xor, b_xor, c_xor, d_xor);\n}\n"))),(0,r.kt)(s.Z,{value:"cin_fast",label:"cin_fast",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <iostream>\n#include <ios>\nusing namespace std;\n\nint main()\n{\n  ios_base::sync_with_stdio(false);\n  cin.tie(NULL);\n\n  int t;\n  cin >> t;\n\n  int a_xor = 0, b_xor = 0, c_xor = 0, d_xor = 0;\n\n  for (int i = 0; i < t; ++i) {\n    int a, b, c, d;\n\n    cin >> a >> b >> c >> d;\n\n    a_xor ^= a;\n    b_xor ^= b;\n    c_xor ^= c;\n    d_xor ^= d;\n  }\n\n  cout << a_xor << ' ' << b_xor << ' ' << c_xor << ' ' << d_xor;\n}\n"))),(0,r.kt)(s.Z,{value:"cin",label:"cin",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <iostream>\n#include <ios>\nusing namespace std;\n\nint main()\n{\n  int t;\n  cin >> t;\n\n  int a_xor = 0, b_xor = 0, c_xor = 0, d_xor = 0;\n\n  for (int i = 0; i < t; ++i) {\n    int a, b, c, d;\n\n    cin >> a >> b >> c >> d;\n\n    a_xor ^= a;\n    b_xor ^= b;\n    c_xor ^= c;\n    d_xor ^= d;\n  }\n\n  cout << a_xor << ' ' << b_xor << ' ' << c_xor << ' ' << d_xor;\n}\n"))),(0,r.kt)(s.Z,{value:"scanf",label:"scanf",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n#include <ios>\nusing namespace std;\n\nint main()\n{\n  ios_base::sync_with_stdio(false);\n  cin.tie(NULL);\n\n  int t;\n  scanf("%d", &t);\n\n  int a_xor = 0, b_xor = 0, c_xor = 0, d_xor = 0;\n\n  for (int i = 0; i < t; ++i) {\n    int a, b, c, d;\n    scanf("%d%d%d%d", &a, &b, &c, &d);\n\n    a_xor ^= a;\n    b_xor ^= b;\n    c_xor ^= c;\n    d_xor ^= d;\n  }\n\n  printf("%d %d %d %d\\n", a_xor, b_xor, c_xor, d_xor);\n}\n'))),(0,r.kt)(s.Z,{value:"scanner",label:"scanner",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kt"},'import java.util.*\n\nfun main() {\n    val sc = Scanner(System.`in`)\n\n    val n = sc.nextInt()\n\n    var a_x = 0\n    var b_x = 0\n    var c_x = 0\n    var d_x = 0\n\n    for (i in 0 until n) {\n        val a = sc.nextInt()\n        val b = sc.nextInt()\n        val c = sc.nextInt()\n        val d = sc.nextInt()\n        a_x = a_x xor a\n        b_x = b_x xor b\n        c_x = c_x xor c\n        d_x = d_x xor d\n    }\n\n    println("$a_x $b_x $c_x $d_x")\n}\n'))),(0,r.kt)(s.Z,{value:"tokenizer",label:"token",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kt"},'import java.io.BufferedReader\nimport java.io.InputStreamReader\nimport java.io.StreamTokenizer\n\nfun main() {\n  val sc = StreamTokenizer(\n    BufferedReader( // +100ms without buffering\n      InputStreamReader(System.`in`, "ISO-8859-1")))\n\n  sc.nextToken()\n  val n = sc.nval.toInt()\n\n  var a_x = 0\n  var b_x = 0\n  var c_x = 0\n  var d_x = 0\n\n  for (i in 0 until n) {\n      sc.nextToken()\n      val a = sc.nval.toInt()\n      sc.nextToken()\n      val b = sc.nval.toInt()\n      sc.nextToken()\n      val c = sc.nval.toInt()\n      sc.nextToken()\n      val d = sc.nval.toInt()\n      a_x = a_x xor a\n      b_x = b_x xor b\n      c_x = c_x xor c\n      d_x = d_x xor d\n  }\n\n  println("$a_x $b_x $c_x $d_x")\n}\n')))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Windows"),(0,r.kt)("p",null,(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Program"),(0,r.kt)("th",{parentName:"tr",align:null},"Lang"),(0,r.kt)("th",{parentName:"tr",align:null},"Compiler"),(0,r.kt)("th",{parentName:"tr",align:"right"},"Mean (Int)"),(0,r.kt)("th",{parentName:"tr",align:"right"},"Mean (Double)"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"fastscan"),(0,r.kt)("td",{parentName:"tr",align:null},"C++"),(0,r.kt)("td",{parentName:"tr",align:null},"msvc64"),(0,r.kt)("td",{parentName:"tr",align:"right"},"34 ms"),(0,r.kt)("td",{parentName:"tr",align:"right"},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"fastscan"),(0,r.kt)("td",{parentName:"tr",align:null},"C#"),(0,r.kt)("td",{parentName:"tr",align:null},"NativeAOT"),(0,r.kt)("td",{parentName:"tr",align:"right"},"36 ms"),(0,r.kt)("td",{parentName:"tr",align:"right"},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"fastscan"),(0,r.kt)("td",{parentName:"tr",align:null},"C++"),(0,r.kt)("td",{parentName:"tr",align:null},"g++64"),(0,r.kt)("td",{parentName:"tr",align:"right"},"45 ms"),(0,r.kt)("td",{parentName:"tr",align:"right"},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"fastscan"),(0,r.kt)("td",{parentName:"tr",align:null},"C#"),(0,r.kt)("td",{parentName:"tr",align:null},"JIT"),(0,r.kt)("td",{parentName:"tr",align:"right"},"58 ms"),(0,r.kt)("td",{parentName:"tr",align:"right"},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"console"),(0,r.kt)("td",{parentName:"tr",align:null},"C#"),(0,r.kt)("td",{parentName:"tr",align:null},"NativeAOT"),(0,r.kt)("td",{parentName:"tr",align:"right"},"58 ms"),(0,r.kt)("td",{parentName:"tr",align:"right"},"92 ms")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"cin_fast"),(0,r.kt)("td",{parentName:"tr",align:null},"C++"),(0,r.kt)("td",{parentName:"tr",align:null},"g++64"),(0,r.kt)("td",{parentName:"tr",align:"right"},"74 ms"),(0,r.kt)("td",{parentName:"tr",align:"right"},"1650 ms")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"scanf"),(0,r.kt)("td",{parentName:"tr",align:null},"C++"),(0,r.kt)("td",{parentName:"tr",align:null},"msvc64"),(0,r.kt)("td",{parentName:"tr",align:"right"},"76 ms"),(0,r.kt)("td",{parentName:"tr",align:"right"},"100 ms")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"console"),(0,r.kt)("td",{parentName:"tr",align:null},"C#"),(0,r.kt)("td",{parentName:"tr",align:null},"JIT"),(0,r.kt)("td",{parentName:"tr",align:"right"},"85 ms"),(0,r.kt)("td",{parentName:"tr",align:"right"},"117 ms")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"token"),(0,r.kt)("td",{parentName:"tr",align:null},"Kt"),(0,r.kt)("td",{parentName:"tr",align:null},"JVM"),(0,r.kt)("td",{parentName:"tr",align:"right"},"121 ms"),(0,r.kt)("td",{parentName:"tr",align:"right"},"121 ms")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"slowscan"),(0,r.kt)("td",{parentName:"tr",align:null},"C#"),(0,r.kt)("td",{parentName:"tr",align:null},"JIT"),(0,r.kt)("td",{parentName:"tr",align:"right"},"117 ms"),(0,r.kt)("td",{parentName:"tr",align:"right"},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"slowscan"),(0,r.kt)("td",{parentName:"tr",align:null},"C#"),(0,r.kt)("td",{parentName:"tr",align:null},"NativeAOT"),(0,r.kt)("td",{parentName:"tr",align:"right"},"121 ms"),(0,r.kt)("td",{parentName:"tr",align:"right"},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"scanf"),(0,r.kt)("td",{parentName:"tr",align:null},"C++"),(0,r.kt)("td",{parentName:"tr",align:null},"g++64"),(0,r.kt)("td",{parentName:"tr",align:"right"},"190 ms"),(0,r.kt)("td",{parentName:"tr",align:"right"},"310 ms")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"cin_fast"),(0,r.kt)("td",{parentName:"tr",align:null},"C++"),(0,r.kt)("td",{parentName:"tr",align:null},"msvc64"),(0,r.kt)("td",{parentName:"tr",align:"right"},"243 ms"),(0,r.kt)("td",{parentName:"tr",align:"right"},"274 ms")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"cin"),(0,r.kt)("td",{parentName:"tr",align:null},"C++"),(0,r.kt)("td",{parentName:"tr",align:null},"msvc64"),(0,r.kt)("td",{parentName:"tr",align:"right"},"271 ms"),(0,r.kt)("td",{parentName:"tr",align:"right"},"300 ms")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"cin"),(0,r.kt)("td",{parentName:"tr",align:null},"C++"),(0,r.kt)("td",{parentName:"tr",align:null},"g++64"),(0,r.kt)("td",{parentName:"tr",align:"right"},"424 ms"),(0,r.kt)("td",{parentName:"tr",align:"right"},"2000 ms")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"scanner"),(0,r.kt)("td",{parentName:"tr",align:null},"Kt"),(0,r.kt)("td",{parentName:"tr",align:null},"JVM"),(0,r.kt)("td",{parentName:"tr",align:"right"},"485 ms"),(0,r.kt)("td",{parentName:"tr",align:"right"},"2000 ms")))))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Linux"),(0,r.kt)("p",null,(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Program"),(0,r.kt)("th",{parentName:"tr",align:null},"Lang"),(0,r.kt)("th",{parentName:"tr",align:null},"Compiler"),(0,r.kt)("th",{parentName:"tr",align:"right"},"Mean (Int)"),(0,r.kt)("th",{parentName:"tr",align:"right"},"Mean (Double)"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"fastscan"),(0,r.kt)("td",{parentName:"tr",align:null},"C++"),(0,r.kt)("td",{parentName:"tr",align:null},"g++64"),(0,r.kt)("td",{parentName:"tr",align:"right"},"14 ms"),(0,r.kt)("td",{parentName:"tr",align:"right"},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"fastscan"),(0,r.kt)("td",{parentName:"tr",align:null},"C#"),(0,r.kt)("td",{parentName:"tr",align:null},"NativeAOT"),(0,r.kt)("td",{parentName:"tr",align:"right"},"27 ms"),(0,r.kt)("td",{parentName:"tr",align:"right"},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"cin_fast"),(0,r.kt)("td",{parentName:"tr",align:null},"C++"),(0,r.kt)("td",{parentName:"tr",align:null},"g++64"),(0,r.kt)("td",{parentName:"tr",align:"right"},"38 ms"),(0,r.kt)("td",{parentName:"tr",align:"right"},"101 ms")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"scanf"),(0,r.kt)("td",{parentName:"tr",align:null},"C++"),(0,r.kt)("td",{parentName:"tr",align:null},"g++64"),(0,r.kt)("td",{parentName:"tr",align:"right"},"44 ms"),(0,r.kt)("td",{parentName:"tr",align:"right"},"70 ms")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"console"),(0,r.kt)("td",{parentName:"tr",align:null},"C#"),(0,r.kt)("td",{parentName:"tr",align:null},"NativeAOT"),(0,r.kt)("td",{parentName:"tr",align:"right"},"64 ms"),(0,r.kt)("td",{parentName:"tr",align:"right"},"117 ms")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"token"),(0,r.kt)("td",{parentName:"tr",align:null},"Kt"),(0,r.kt)("td",{parentName:"tr",align:null},"JVM"),(0,r.kt)("td",{parentName:"tr",align:"right"},"97 ms"),(0,r.kt)("td",{parentName:"tr",align:"right"},"97 ms")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"slowscan"),(0,r.kt)("td",{parentName:"tr",align:null},"C#"),(0,r.kt)("td",{parentName:"tr",align:null},"NativeAOT"),(0,r.kt)("td",{parentName:"tr",align:"right"},"125 ms"),(0,r.kt)("td",{parentName:"tr",align:"right"},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"cin"),(0,r.kt)("td",{parentName:"tr",align:null},"C++"),(0,r.kt)("td",{parentName:"tr",align:null},"g++64"),(0,r.kt)("td",{parentName:"tr",align:"right"},"150 ms"),(0,r.kt)("td",{parentName:"tr",align:"right"},"220 ms")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"console"),(0,r.kt)("td",{parentName:"tr",align:null},"C#"),(0,r.kt)("td",{parentName:"tr",align:null},"JIT"),(0,r.kt)("td",{parentName:"tr",align:"right"},"160 ms"),(0,r.kt)("td",{parentName:"tr",align:"right"},"200 ms")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"slowscan"),(0,r.kt)("td",{parentName:"tr",align:null},"C#"),(0,r.kt)("td",{parentName:"tr",align:null},"JIT"),(0,r.kt)("td",{parentName:"tr",align:"right"},"230 ms"),(0,r.kt)("td",{parentName:"tr",align:"right"},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"scanner"),(0,r.kt)("td",{parentName:"tr",align:null},"Kt"),(0,r.kt)("td",{parentName:"tr",align:null},"JVM"),(0,r.kt)("td",{parentName:"tr",align:"right"},"500 ms"),(0,r.kt)("td",{parentName:"tr",align:"right"},"1080 ms")))))),(0,r.kt)("p",null,"As we can see, .NET performs for input very well in this scenario. And Java ",(0,r.kt)("inlineCode",{parentName:"p"},"Scanner")," which is based on the regular expressions is outsider."),(0,r.kt)("h3",{id:"scenario-2-echo"},"Scenario 2: Echo"),(0,r.kt)("p",null,"In this scenario, input and output are equal.\nIt simulates a typical programming contest problem where the program reads a number of queries from input and outputs the answer for each query."),(0,r.kt)("p",null,"Since the input is static and not dependent on the output, synchronization between STDIN and STDOUT is unnecessary."),(0,r.kt)("p",null,"Echo (read, parse, and write) 200000 lines with 4 numbers each"),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"cs_console",label:"console (C#)",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'int N = int.Parse(Console.ReadLine());\n\nfor (var i = 0; i < N; ++i)\n{\n  var numbers = Console.ReadLine().Split();\n  int a = int.Parse(numbers[0]); // (int)double.Parse(numbers[0], CultureInfo.InvariantCulture);\n  int b = int.Parse(numbers[1]);\n  int c = int.Parse(numbers[2]);\n  int d = int.Parse(numbers[3]);\n\n  Console.WriteLine($"{a} {b} {c} {d}");\n}\n'))),(0,r.kt)(s.Z,{value:"cs_stream",label:"stream (C#)",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'using var input = new StreamReader(Console.OpenStandardInput());\nusing var output = new StreamWriter(Console.OpenStandardOutput());\n\nint N = int.Parse(input.ReadLine());\n\nfor (var i = 0; i < N; ++i)\n{\n  var numbers = input.ReadLine().Split();\n  int a = int.Parse(numbers[0]); // (int)double.Parse(numbers[0], CultureInfo.InvariantCulture);\n  int b = int.Parse(numbers[1]);\n  int c = int.Parse(numbers[2]);\n  int d = int.Parse(numbers[3]);\n\n  output.WriteLine($"{a} {b} {c} {d}");\n}\n'))),(0,r.kt)(s.Z,{value:"cin_cout_fast",label:"cin_cout_fast",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <iostream>\n#include <ios>\nusing namespace std;\n\nint main()\n{\n  ios_base::sync_with_stdio(false);\n  cin.tie(NULL);\n\n  int t;\n  cin >> t;\n\n  for (int i = 0; i < t; ++i) {\n    int a, b, c, d;\n\n    cin >> a >> b >> c >> d;\n\n    cout << a << ' ' << b << ' ' << c << ' ' << d << '\\n';\n  }\n}\n"))),(0,r.kt)(s.Z,{value:"cin",label:"cin",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n#include <ios>\nusing namespace std;\n\nint main()\n{\n  int t;\n  cin >> t;\n\n  for (int i = 0; i < t; ++i) {\n    int a, b, c, d;\n\n    cin >> a >> b >> c >> d;\n\n    cout << a << \' \' << b << \' \' << c << \' \' << d << \'\\n\';\n  }\n}```\n\n</TabItem>\n<TabItem value="scanf_printf" label="scanf_printf">\n\n```cpp\n#include <iostream>\n#include <ios>\nusing namespace std;\n\nint main()\n{\n  ios_base::sync_with_stdio(false);\n  cin.tie(NULL);\n\n  int t;\n  scanf("%d", &t);\n\n  for (int i = 0; i < t; ++i) {\n    int a, b, c, d;\n    scanf("%d%d%d%d", &a, &b, &c, &d);\n    printf("%d %d %d %d\\n", a, b, c, d);\n  }\n}\n')))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Windows"),(0,r.kt)("p",null,(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Program"),(0,r.kt)("th",{parentName:"tr",align:null},"Lang"),(0,r.kt)("th",{parentName:"tr",align:null},"Compiler"),(0,r.kt)("th",{parentName:"tr",align:"right"},"Mean"),(0,r.kt)("th",{parentName:"tr",align:"right"},"Mean (Double)"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"stream"),(0,r.kt)("td",{parentName:"tr",align:null},"C#"),(0,r.kt)("td",{parentName:"tr",align:null},"NativeAOT"),(0,r.kt)("td",{parentName:"tr",align:"right"},"87 ms"),(0,r.kt)("td",{parentName:"tr",align:"right"},"262 ms")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"cin_cout_fast"),(0,r.kt)("td",{parentName:"tr",align:null},"C++"),(0,r.kt)("td",{parentName:"tr",align:null},"g++64"),(0,r.kt)("td",{parentName:"tr",align:"right"},"109 ms"),(0,r.kt)("td",{parentName:"tr",align:"right"},"1911 ms")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"stream"),(0,r.kt)("td",{parentName:"tr",align:null},"C#"),(0,r.kt)("td",{parentName:"tr",align:null},"JIT"),(0,r.kt)("td",{parentName:"tr",align:"right"},"118 ms"),(0,r.kt)("td",{parentName:"tr",align:"right"},"225 ms")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"printf_scanf"),(0,r.kt)("td",{parentName:"tr",align:null},"C++"),(0,r.kt)("td",{parentName:"tr",align:null},"msvc64"),(0,r.kt)("td",{parentName:"tr",align:"right"},"130 ms"),(0,r.kt)("td",{parentName:"tr",align:"right"},"260 ms")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"printf_scanf"),(0,r.kt)("td",{parentName:"tr",align:null},"C++"),(0,r.kt)("td",{parentName:"tr",align:null},"g++64"),(0,r.kt)("td",{parentName:"tr",align:"right"},"280 ms"),(0,r.kt)("td",{parentName:"tr",align:"right"},"470 ms")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"console"),(0,r.kt)("td",{parentName:"tr",align:null},"C#"),(0,r.kt)("td",{parentName:"tr",align:null},"NativeAOT"),(0,r.kt)("td",{parentName:"tr",align:"right"},"300 ms"),(0,r.kt)("td",{parentName:"tr",align:"right"},"580 ms")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"console"),(0,r.kt)("td",{parentName:"tr",align:null},"C#"),(0,r.kt)("td",{parentName:"tr",align:null},"JIT"),(0,r.kt)("td",{parentName:"tr",align:"right"},"350 ms"),(0,r.kt)("td",{parentName:"tr",align:"right"},"560 ms")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"cin_cout_fast"),(0,r.kt)("td",{parentName:"tr",align:null},"C++"),(0,r.kt)("td",{parentName:"tr",align:null},"msvc64"),(0,r.kt)("td",{parentName:"tr",align:"right"},"440 ms"),(0,r.kt)("td",{parentName:"tr",align:"right"},"680 ms")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"cin_cout"),(0,r.kt)("td",{parentName:"tr",align:null},"C++"),(0,r.kt)("td",{parentName:"tr",align:null},"msvc64"),(0,r.kt)("td",{parentName:"tr",align:"right"},"800 ms"),(0,r.kt)("td",{parentName:"tr",align:"right"},"1050 ms")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"cin_cout"),(0,r.kt)("td",{parentName:"tr",align:null},"C++"),(0,r.kt)("td",{parentName:"tr",align:null},"g++64"),(0,r.kt)("td",{parentName:"tr",align:"right"},"820 ms"),(0,r.kt)("td",{parentName:"tr",align:"right"},"2790 ms")))))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Linux"),(0,r.kt)("p",null,(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Program"),(0,r.kt)("th",{parentName:"tr",align:null},"Lang"),(0,r.kt)("th",{parentName:"tr",align:null},"Compiler"),(0,r.kt)("th",{parentName:"tr",align:"right"},"Mean (Int)"),(0,r.kt)("th",{parentName:"tr",align:"right"},"Mean (Double)"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"cin_cout_fast"),(0,r.kt)("td",{parentName:"tr",align:null},"C++"),(0,r.kt)("td",{parentName:"tr",align:null},"g++64"),(0,r.kt)("td",{parentName:"tr",align:"right"},"80 ms"),(0,r.kt)("td",{parentName:"tr",align:"right"},"376 ms")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"scanf"),(0,r.kt)("td",{parentName:"tr",align:null},"C++"),(0,r.kt)("td",{parentName:"tr",align:null},"g++64"),(0,r.kt)("td",{parentName:"tr",align:"right"},"82 ms"),(0,r.kt)("td",{parentName:"tr",align:"right"},"260 ms")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"stream"),(0,r.kt)("td",{parentName:"tr",align:null},"C#"),(0,r.kt)("td",{parentName:"tr",align:null},"NativeAOT"),(0,r.kt)("td",{parentName:"tr",align:"right"},"104 ms"),(0,r.kt)("td",{parentName:"tr",align:"right"},"240 ms")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"stream"),(0,r.kt)("td",{parentName:"tr",align:null},"C#"),(0,r.kt)("td",{parentName:"tr",align:null},"JIT"),(0,r.kt)("td",{parentName:"tr",align:"right"},"225 ms"),(0,r.kt)("td",{parentName:"tr",align:"right"},"370 ms")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"console"),(0,r.kt)("td",{parentName:"tr",align:null},"C#"),(0,r.kt)("td",{parentName:"tr",align:null},"NativeAOT"),(0,r.kt)("td",{parentName:"tr",align:"right"},"310 ms"),(0,r.kt)("td",{parentName:"tr",align:"right"},"500 ms")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"console"),(0,r.kt)("td",{parentName:"tr",align:null},"C#"),(0,r.kt)("td",{parentName:"tr",align:null},"JIT"),(0,r.kt)("td",{parentName:"tr",align:"right"},"415 ms"),(0,r.kt)("td",{parentName:"tr",align:"right"},"580 ms")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"cin_cout"),(0,r.kt)("td",{parentName:"tr",align:null},"C++"),(0,r.kt)("td",{parentName:"tr",align:null},"g++64"),(0,r.kt)("td",{parentName:"tr",align:"right"},"430 ms"),(0,r.kt)("td",{parentName:"tr",align:"right"},"800 ms")))))),(0,r.kt)("h2",{id:"conclusion"},"Conclusion"),(0,r.kt)("p",null,'The performance of text IO varies greatly depending on the target platform, runtime, compiler, and compiler flags, which explains the abundance of misconceptions on the subject. As we have seen, every platform and language can be "slow" if performance is not taken into consideration.'),(0,r.kt)("p",null,"For C#, the advice for writing high-performance text IO code is to use the STDIN/STDOUT streams instead of the static ",(0,r.kt)("inlineCode",{parentName:"p"},"Console")," methods. This is not so important for input, but it provides a significant speedup for output, as the ",(0,r.kt)("inlineCode",{parentName:"p"},"Console.Write/WriteLine")," methods flush the output stream to the underlying OS buffer after each write operation. This may be useful for interactive console applications, but performance killer for data-intensive IO."),(0,r.kt)("h2",{id:"announce"},"Announce"),(0,r.kt)("p",null,"In the next posts we will discuss:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Efficient plain-text input reading implementation on .NET")),(0,r.kt)("h2",{id:"links"},"Links"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://codegolf.stackexchange.com/questions/215216/high-throughput-fizz-buzz"},"High throughput Fizz Buzz"))),(0,r.kt)("h2",{id:"homework"},"Homework"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Write a high throughput Fizz Buzz on any .NET language")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Previous homework writeup"),(0,r.kt)("p",null,(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"https://timus.online/problem.aspx?space=1&num=1510&locale=en"},"1510 problem")," has tight memory limits: 16 MB for 500000 up to 10 digit integers."),(0,r.kt)("p",null,"While this does not prevent storing all the input in memory, because ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"s"),(0,r.kt)("mi",{parentName:"mrow"},"i"),(0,r.kt)("mi",{parentName:"mrow"},"z"),(0,r.kt)("mi",{parentName:"mrow"},"e"),(0,r.kt)("mi",{parentName:"mrow"},"o"),(0,r.kt)("mi",{parentName:"mrow"},"f"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,r.kt)("mi",{parentName:"mrow"},"i"),(0,r.kt)("mi",{parentName:"mrow"},"n"),(0,r.kt)("mi",{parentName:"mrow"},"t"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,r.kt)("mo",{parentName:"mrow"},"\u2217"),(0,r.kt)("mn",{parentName:"mrow"},"500000"),(0,r.kt)("mo",{parentName:"mrow"},"<"),(0,r.kt)("mn",{parentName:"mrow"},"16"),(0,r.kt)("mi",{parentName:"mrow"},"M"),(0,r.kt)("mi",{parentName:"mrow"},"B")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"sizeof(int)*500000 < 16 MB")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"s"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"i"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"zeo"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10764em"}},"f"),(0,r.kt)("span",{parentName:"span",className:"mopen"},"("),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"in"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"t"),(0,r.kt)("span",{parentName:"span",className:"mclose"},")"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,r.kt)("span",{parentName:"span",className:"mbin"},"\u2217"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6835em",verticalAlign:"-0.0391em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},"500000"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},"<"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6833em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},"16"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.05017em"}},"MB"))))),", each integer serialized as a .NET ",(0,r.kt)("inlineCode",{parentName:"p"},"string")," occupies significantly more space:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"16 bytes for header and method table pointer on x64"),(0,r.kt)("li",{parentName:"ul"},"4 bytes for string length"),(0,r.kt)("li",{parentName:"ul"},"20 bytes for 10 UTF-16 characters"),(0,r.kt)("li",{parentName:"ul"},"2 bytes for null terminator char")),(0,r.kt)("p",null,"So, ~42 bytes for 10 characters. ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mn",{parentName:"mrow"},"42"),(0,r.kt)("mo",{parentName:"mrow"},"\u2217"),(0,r.kt)("mn",{parentName:"mrow"},"500000"),(0,r.kt)("mo",{parentName:"mrow"},"="),(0,r.kt)("mn",{parentName:"mrow"},"21"),(0,r.kt)("mo",{parentName:"mrow"},"\u2217"),(0,r.kt)("mn",{parentName:"mrow"},"1"),(0,r.kt)("msup",{parentName:"mrow"},(0,r.kt)("mn",{parentName:"msup"},"0"),(0,r.kt)("mn",{parentName:"msup"},"6")),(0,r.kt)("mo",{parentName:"mrow"},">"),(0,r.kt)("mn",{parentName:"mrow"},"16"),(0,r.kt)("mi",{parentName:"mrow"},"M"),(0,r.kt)("mi",{parentName:"mrow"},"B")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"42 * 500000 = 21 * 10^6 > 16 MB")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6444em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},"42"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,r.kt)("span",{parentName:"span",className:"mbin"},"\u2217"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6444em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},"500000"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},"="),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6444em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},"21"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,r.kt)("span",{parentName:"span",className:"mbin"},"\u2217"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.8532em",verticalAlign:"-0.0391em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},"1"),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord"},"0"),(0,r.kt)("span",{parentName:"span",className:"msupsub"},(0,r.kt)("span",{parentName:"span",className:"vlist-t"},(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.8141em"}},(0,r.kt)("span",{parentName:"span",style:{top:"-3.063em",marginRight:"0.05em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,r.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},"6")))))))),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},">"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6833em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},"16"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.05017em"}},"MB")))))),(0,r.kt)("p",null,"Yes, these strings are short-lived, but it is not guaranteed that the GC will clean them up and reclaim memory during program's run time. Even a solution using a ",(0,r.kt)("inlineCode",{parentName:"p"},"StreamReader")," will fail with a Memory Limit Exceed verdict!"),(0,r.kt)("p",null,"Forcing garbage collection with ",(0,r.kt)("inlineCode",{parentName:"p"},"GC.Collect")," may lead to Time Limit. What to do? Adapt the C++ ",(0,r.kt)("inlineCode",{parentName:"p"},"fastscan")," code from the previous article for C#. Or, for now, just use the code from this article."))))}c.isMDXComponent=!0}}]);